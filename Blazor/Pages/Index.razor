@page "/"

@implements IDisposable

@using System;
@using System.IO;
@using System.Linq;
@using Agai;
@using AgaiUI;
@using AgaiUI.Data;
@using Microsoft.Extensions.Logging
@using Newtonsoft.Json;
@using System.Drawing;
@using System.Diagnostics;

@inject ILogger<Index> Logger
@inject IJSRuntime JsRuntime;

@if (!isConnected)
{
    <p>Loading...</p>
}
else
{
    <h3>Select Save Files</h3>

    <div>
        UserName: <InputText id="User" @bind-Value="UserName" DisplayName="UserName" />

        <button @onclick="SaveUserData">
            Save User
        </button>
    </div>
    <p>
        <label>
            <InputFile OnChange="@LoadFiles" multiple />
        </label>
    </p>

    @if (isLoading)
    {
        <p>Uploading...</p>
    }
    else
    {
        <LoadedFileListDisplay LoadedFiles="@loadedFiles" FileSelected="SelectedFileChanged" />
        <div class="mainHeader">
            <div>
                <div>
                    Search: <InputText ValueExpression="()=>SearchText" oninput="@((ChangeEventArgs __e) =>{
                    SearchText = __e?.Value?.ToString()??string.Empty;
                    StateHasChanged();
                })" Immediate="true" />
                </div>
            </div>
            <div>
                <InputMultiSelect TData="EnabledSection"
                                  Options="((EnabledSection[])Enum.GetValues(typeof(EnabledSection))).ToHashSet()"
                @bind-Selection="@EnabledSelections" />
            </div>
            <div>
                Show Only Uncategorized: <InputCheckbox @bind-Value="ShowOnlyUncategorized" />
            </div>
        </div>
        @if (enabledSelections.HasFlag(EnabledSection.Camp) && AllObjects.Any())
        {
            <br />
            <h1 @onclick="()=>ToggleCampOpen()">
                Camp: @if (!@CampOpen)
                {
                    <span>▶</span>
                }
                else
                {
                    <span>▼</span>
                }
            </h1>
            @if (@CampOpen)
            {
                <div>
                    Names:
                    <InputMultiSelect TData="string"
                                      Options="AllObjects.Select(o=>o.Name).Union(AllString).OrderBy(a=>a).ToHashSet(StringComparer.InvariantCultureIgnoreCase)"
                    @bind-Selection="@CampSelectedNames" />

                    <div>
                        Show Orbs With more than one item: <InputCheckbox @bind-Value="ShowOnlyChonkOrbs" />
                    </div>
                </div>
                <div class="campHolder" style="overflow: scroll;">
                    @foreach (var obj in AllObjects
                   .Where(n => string.IsNullOrWhiteSpace(SearchText)
                   || (JsonConvert.SerializeObject(n.Original)?.Contains(SearchText, StringComparison.InvariantCultureIgnoreCase) ?? false))
                   )
                    {
                        if ((!(CampSelectedNames?.Any() ?? false)
                        || CampSelectedNames.Contains(obj?.Name ?? string.Empty)
                        || CampSelectedNames.Contains("All"))
                        && (string.IsNullOrWhiteSpace(ContainsText) || obj.OriginalString.Contains(ContainsText)))
                        {
                            <CampObjectDisplay Object="@obj" ObjectSelected="SelectCampObject" XWiggle="@XWiggle" YWiggle="@YWiggle" ShowOnlyUncategorized="@ShowOnlyUncategorized" />
                        }
                    }
                </div>
            }
        }
    }
}
@code {
    [Flags]
    public enum EnabledSection
    {
        Nests = 1 << 0,
        Dragons = 1 << 4,
        Camp = 1 << 1,
        Orbs = 1 << 2,
        Unfiltered = 1 << 3,
        Compare = 1 << 4,
        All = Nests | Dragons | Camp | Orbs | Unfiltered | Compare,
    }
    public UserState State { get; set; } = new();
    public EnabledSection enabledSelections = EnabledSection.Nests | EnabledSection.Dragons | EnabledSection.Unfiltered | EnabledSection.Camp;
    public HashSet<EnabledSection> EnabledSelections
    {
        get
        {
            var retval = ((EnabledSection[])Enum.GetValues(typeof(EnabledSection)))
                .Where(a => !a.Equals(EnabledSection.All))
                .Where(e => e != default && enabledSelections.HasFlag(e))
                .ToHashSet();
            return retval;
        }

        set
        {
            var vals = string.Join(",", value.Where(a => !a.Equals(EnabledSection.All)));
            if (string.IsNullOrWhiteSpace(vals))
                if (value.Count == 1 && value.Single().Equals(EnabledSection.All))
                    enabledSelections = EnabledSection.All;
                else
                    enabledSelections = (EnabledSection)0;
            else
                enabledSelections = Enum.Parse<EnabledSection>(vals);
        }
    }
    public List<GameObject> AllObjects { get; set; } = new();
    public const string SessionUserName = "_UserData";
    public bool ShowOnlyUncategorized { get; set; } = false;

    private string SearchText { get; set; } = string.Empty;
    private string? UserName
    {
        get => State.Name;
        set
        {
            if (!string.IsNullOrWhiteSpace(value))
            {
                State.Name = value;
            }
        }
    }

    protected async Task SaveUserData()
    {
        //await Storage.SetAsync("_UserData", State);
    }

    public bool NestsOpen { get; set; }
    void ToggleNestsOpen()
    {
        NestsOpen = !NestsOpen;
    }

    public bool AllDataOpen { get; set; }
    void ToggleAllDataOpen()
    {
        AllDataOpen = !AllDataOpen;
    }

    public bool CampOpen { get; set; } = true;
    void ToggleCampOpen()
    {
        CampOpen = !CampOpen;
    }

    public bool CompareOpen { get; set; } = true;
    void ToggleCompareOpen()
    {
        CompareOpen = !CompareOpen;
    }

    public bool ShowWhereTextIsFound { get; set; } = false;
    void ToggleShowWhereTextIsFound()
    {
        ShowWhereTextIsFound = !ShowWhereTextIsFound;
    }

    protected async Task SelectedFileChanged(HelpfulFileData args)
    {
        this.State.SelectedFile = args.FullyQualifiedFilePath;
        //this.SelectedFileDb = await LoadFile(this.State.SelectedFile);

        isLoading = true;
        //this.AllObjects = SelectedFileDb.Home.Where(a => a is not null).Select(a => a!).ToList();
        this.XWiggle = this.AllObjects.Min(o => o.Position.Value.x);
        if (XWiggle < 0) XWiggle = Math.Abs(XWiggle); else XWiggle = 0;
        this.YWiggle = this.AllObjects.Min(o => o.Position.Value.y);
        if (YWiggle < 0) YWiggle = Math.Abs(YWiggle); else YWiggle = 0;
        isLoading = false;
        await SaveUserData();
    }

    private List<HelpfulFileData> loadedFiles = new();
    private bool isLoading;
    private bool isConnected;

    protected override async Task OnInitializedAsync()
    {
        //var workingDirectory = Path.Combine(Environment.ContentRootPath, Environment.EnvironmentName, "unsafe_uploads");
        //loadedFiles = Directory.EnumerateFiles(workingDirectory)
        //    .Select(a => new HelpfulFileData((IBrowserFile)new MySQLiteFile(a, "SqlLite"), a))
        //    .ToList();
        //
        //await Task.Delay(0);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            try
            {
                //var getStorage = await Storage.GetAsync<UserState>("_UserData");
                //if (getStorage.Success && getStorage.Value is not null)
                //    State = getStorage.Value;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

            StateHasChanged();
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var initialDir = Directory.GetCurrentDirectory();
        //var workingDirectory = Path.Combine(Environment.ContentRootPath, Environment.EnvironmentName, "unsafe_uploads");
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                //var trustedFileNameForFileStorage = $"{UserName}__{Path.GetRandomFileName()}";
                //loadedFiles.Add(new HelpfulFileData(file, trustedFileNameForFileStorage));
                //
                //var path = Path.Combine(workingDirectory, trustedFileNameForFileStorage);
                //
                //await using FileStream fs = new(path, FileMode.Create);
                //await file.OpenReadStream(long.MaxValue).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        Directory.SetCurrentDirectory(initialDir);
        isLoading = false;
    }

    #region Camp
    public GameObject? CampSelectedObject;
    public HashSet<string> CampSelectedNames = new(StringComparer.InvariantCultureIgnoreCase);
    public string ContainsText = string.Empty;
    public void ContainsTextChange(ChangeEventArgs e)
    {
        ContainsText = e?.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }
    string[] AllString = new string[] { "_All" };
    public double XWiggle;
    public double YWiggle;

    private void SelectCampObject(GameObject obj)
    {
        CampSelectedObject = obj;
    }

    public bool ShowOnlyChonkOrbs { get; set; } = false;
    #endregion Camp

    public void Dispose()
    {
        //var dict = Interlocked.Exchange(ref Files, default);
        //if (dict is not null)
        //{
        //    foreach (var file in dict.Values)
        //    {
        //        file?.Dispose();
        //    }
        //}
    }
}