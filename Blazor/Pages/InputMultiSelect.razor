@page "/InputMultiSelect"
@using System.Collections.Concurrent;
@using System.Text.RegularExpressions;
@typeparam TData
@inject ILogger<InputMultiSelect<TData>> Logger

<div>
    <div class="inputMultiSelect" @onfocusin="()=>Opened=true">
        <div class="inputMultiSelectSelected">
            @foreach (var s in Selection)
            {
                <div class="itemWithButton">
                    <div class="inputMultiSelectSelectedItem">@s</div>
                    <div role="button" class="inputMultiSelectSelectedItemRemove" aria-label="Remove @s" @onclick="()=>RemoveItem(s)">
                        <svg height="14" width="14" viewBox="0 0 20 20" aria-hidden="true" focusable="false" class="css-8mmkcg">
                            <path d="M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z" />
                        </svg>
                    </div>
                </div>
            }
            <div class="inputMultiSelectInputContainer">
                <InputText class=""
                    autocapitalize="none"
                    autocomplete="off"
                    autocorrect="off"
                    id="react-select-8-input"
                    spellcheck="false"
                    aria-autocomplete="list"
                    aria-expanded="true"
                    aria-haspopup="true"
                    role="combobox"
                    style="color: inherit; background: 0px center; opacity: 1; width: 100%; grid-area: 1 / 2 / auto / auto; font: inherit; min-width: 2px; border: 0px; margin: 0px; outline: 0px; padding: 0px;"
                    aria-controls="react-select-8-listbox"
                    aria-owns="react-select-8-listbox"
                    ValueExpression="()=>FilterText"
                    @oninput="FilterChange"
                    Immediate="true" />
            </div>
        </div>
        <div class="inputMultiSelectTools">
            <div class="inputMultiSelectToolsIndicatorContainer" aria-hidden="true" @onclick="ClearSelection">
                <svg height="20" width="20" viewBox="0 0 20 20" aria-hidden="true" focusable="false" class="css-8mmkcg">
                    <path d="M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"></path>
                </svg>
            </div>
            <span class="inputMultiSelectToolsClearSelectionSeparator"></span>
            <div class="inputMultiSelectToolsIndicatorContainer" aria-hidden="true">
                <svg height="20" width="20" viewBox="0 0 20 20" aria-hidden="true" focusable="false" class="css-8mmkcg">
                    <path d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"></path>
                </svg>
            </div>
        </div>
        @if (Opened && Options is not null && Options.Any())
        {
            <div class="inputMultiSelectOptions" @onpointerleave="()=>Opened=false">
                <div>
                    @foreach (var s in FilteredOptions)
                    {
                        <div aria-disabled="false" @onclick="()=>!Selection.Contains(s)?AddItem(s):RemoveItem(s)">
                            @s
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public IReadOnlySet<TData> Options { get; set; } = Array.Empty<TData>().ToHashSet();
    [Parameter]
    public HashSet<TData> Selection { get; set; } = new();
    [Parameter]
    public EventCallback<HashSet<TData>> SelectionChanged { get; set; }

    public IEnumerable<TData> FilteredOptions
    {
        get
        {
            var retval = Options.Where(a =>
                !Selection.Contains(a)
                && (string.IsNullOrWhiteSpace(FilterText)
                    || (a.ToString()!.Contains(FilterText, StringComparison.InvariantCultureIgnoreCase)
                    || Regex.IsMatch(FilterText, a.ToString()!))))
                .ToList();
            Opened = true;
            return retval;
        }
    }

    public string FilterText { get; set; } = string.Empty;
    private bool Opened { get; set; }
    public async Task ClearSelection()
    {
        Selection.Clear();
        await SelectionChanged.InvokeAsync(Selection);
    }
    public async Task RemoveItem(TData data)
    {
        Opened = true;
        if (Selection.Remove(data))
            await SelectionChanged.InvokeAsync(Selection);
    }
    public async Task AddItem(TData data)
    {
        Opened = true;
        if (Selection.Add(data))
            await SelectionChanged.InvokeAsync(Selection);
    }
    public void FilterChange(ChangeEventArgs e)
    {
        FilterText = e?.Value?.ToString() ?? string.Empty;
        Opened = true;
        StateHasChanged();
    }
    public record RenderOptions { }
}