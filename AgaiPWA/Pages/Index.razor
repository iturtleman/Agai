@page "/"

@using System;
@using System.IO;
@using System.Linq;
@using Agai;
@using Microsoft.Extensions.Logging
@using Newtonsoft.Json;
@using System.Drawing;
@using System.Diagnostics;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager Navigation

@inject NavigationManager Navigation
@inject ILogger<Index> Logger
@inject IJSRuntime JsRuntime;

@if (!isConnected)
{
    <p>Loading...</p>
}
else
{
    <AuthorizeView>
        <Authorized>
            Welcome, @context.User.Identity?.Name!
            @if (isLoading)
            {
                <p>Uploading...</p>
            }
            else
            {

                <div class="mainHeader">
                    <div>
                        <div>
                            Search: <InputText ValueExpression="()=>SearchText" oninput="@((ChangeEventArgs __e) =>{
                    SearchText = __e?.Value?.ToString()??string.Empty;
                    StateHasChanged();
                })" Immediate="true" />
                        </div>
                    </div>
                    <div>
                        <InputMultiSelect TData="EnabledSection"
                                          Options="((EnabledSection[])Enum.GetValues(typeof(EnabledSection))).ToHashSet()"
                                          @bind-Selection="@EnabledSelections" />
                    </div>
                    <div>
                        Show Only Uncategorized: <InputCheckbox @bind-Value="ShowOnlyUncategorized" />
                    </div>
                </div>
                @if (enabledSelections.HasFlag(EnabledSection.Camp) && AllObjects.Any())
                {
                    <br />
                    <h1 @onclick="()=>ToggleCampOpen()">
                        Camp: @if (!@CampOpen)
                        {
                            <span>▶</span>
                        }
                        else
                        {
                            <span>▼</span>
                        }
                    </h1>
                    @if (@CampOpen)
                    {
                        <div>
                            Names:
                            <InputMultiSelect TData="string"
                                              Options="AllObjects.Select(o=>o.Name).Union(AllString).OrderBy(a=>a).ToHashSet(StringComparer.InvariantCultureIgnoreCase)"
                                              @bind-Selection="@CampSelectedNames" />
                        </div>
                        <div class="campHolder" style="overflow: scroll;">
                            @foreach (var obj in AllObjects
                           .Where(n => string.IsNullOrWhiteSpace(SearchText)
                           || (JsonConvert.SerializeObject(n.Original)?.Contains(SearchText, StringComparison.InvariantCultureIgnoreCase) ?? false))
                           )
                            {
                                if ((!(CampSelectedNames?.Any() ?? false)
                                || CampSelectedNames.Contains(obj?.Name ?? string.Empty)
                                || CampSelectedNames.Contains("All"))
                                && (string.IsNullOrWhiteSpace(ContainsText) || obj.OriginalString.Contains(ContainsText)))
                                {
                                    //<CampObjectDisplay Object="@obj" ObjectSelected="SelectCampObject" XWiggle="@XWiggle" YWiggle="@YWiggle" ShowOnlyUncategorized="@ShowOnlyUncategorized" />
                                }
                            }
                        </div>
                    }
                }
            }
        </Authorized>
        <NotAuthorized>
            <a href="authentication/login">Log in</a>
        </NotAuthorized>
    </AuthorizeView>
}
@code {
    [Flags]
    public enum EnabledSection
    {
        Nests = 1 << 0,
        Dragons = 1 << 4,
        Camp = 1 << 1,
        Orbs = 1 << 2,
        Unfiltered = 1 << 3,
        Compare = 1 << 4,
        All = Nests | Dragons | Camp | Orbs | Unfiltered | Compare,
    }
    public EnabledSection enabledSelections = EnabledSection.Nests | EnabledSection.Dragons | EnabledSection.Unfiltered | EnabledSection.Camp;
    public HashSet<EnabledSection> EnabledSelections
    {
        get
        {
            var retval = ((EnabledSection[])Enum.GetValues(typeof(EnabledSection)))
                .Where(a => !a.Equals(EnabledSection.All))
                .Where(e => e != default && enabledSelections.HasFlag(e))
                .ToHashSet();
            return retval;
        }

        set
        {
            var vals = string.Join(",", value.Where(a => !a.Equals(EnabledSection.All)));
            if (string.IsNullOrWhiteSpace(vals))
                if (value.Count == 1 && value.Single().Equals(EnabledSection.All))
                    enabledSelections = EnabledSection.All;
                else
                    enabledSelections = (EnabledSection)0;
            else
                enabledSelections = Enum.Parse<EnabledSection>(vals);
        }
    }
    public List<GameObject> AllObjects { get; set; } = new();
    public const string SessionUserName = "_UserData";
    public bool ShowOnlyUncategorized { get; set; } = false;

    private string SearchText { get; set; } = string.Empty;

    protected async Task SaveUserData()
    {
        await Task.CompletedTask;
        //await Storage.SetAsync("_UserData", State);
    }

    public bool AllDataOpen { get; set; }
    void ToggleAllDataOpen()
    {
        AllDataOpen = !AllDataOpen;
    }

    public bool CampOpen { get; set; } = true;
    void ToggleCampOpen()
    {
        CampOpen = !CampOpen;
    }

    public bool CompareOpen { get; set; } = true;
    void ToggleCompareOpen()
    {
        CompareOpen = !CompareOpen;
    }

    public bool ShowWhereTextIsFound { get; set; } = false;
    void ToggleShowWhereTextIsFound()
    {
        ShowWhereTextIsFound = !ShowWhereTextIsFound;
    }

    private bool isLoading = false;
    private bool isConnected;

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
        //var workingDirectory = Path.Combine(Environment.ContentRootPath, Environment.EnvironmentName, "unsafe_uploads");
        //loadedFiles = Directory.EnumerateFiles(workingDirectory)
        //    .Select(a => new HelpfulFileData((IBrowserFile)new MySQLiteFile(a, "SqlLite"), a))
        //    .ToList();
        //
        //await Task.Delay(0);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            try
            {
                await Task.CompletedTask;
                //var getStorage = await Storage.GetAsync<UserState>("_UserData");
                //if (getStorage.Success && getStorage.Value is not null)
                //    State = getStorage.Value;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

            StateHasChanged();
        }
    }

    #region Camp
    public HashSet<string> CampSelectedNames = new(StringComparer.InvariantCultureIgnoreCase);
    public string ContainsText = string.Empty;
    public void ContainsTextChange(ChangeEventArgs e)
    {
        ContainsText = e?.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }
    string[] AllString = new string[] { "_All" };

    public GameObject? CampSelectedObject;
    private void SelectCampObject(GameObject obj)
    {
        CampSelectedObject = obj;
    }

    #endregion Camp

}